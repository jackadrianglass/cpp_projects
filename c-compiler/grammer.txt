program -> declaration-list {

}

declaration-list -> declaration-list declaration {

}
| declaration {

}

declaration -> var-declaration {
    
}
| fun-declaration {

}

var-declaration -> type-specifier ID SEMI {
    ID.dtype = type-specifier.dtype;
}
| type-specifier ID LBRACK NUM RBRACK SEMI {
    ID.dtype = type-specifier.dtype;
    ID.isArray = true;
    ID.arraySize = Num.attr.val;
}

type-specifier -> INT{
    type-specifier.dtype = Integer;
} | VOID {
    type-specifier.dtype = Void;
} | BOOL {
    type-specifier.dtype = Boolean;
}

fun-declaration -> type-specifier ID LPAREN params RPAREN compound-stmt {

}

params -> param-list {

}
| VOID {

}

param-list -> param-list COMMA param {

}
| param {

}

param -> type-specifier ID {

}
| type-specifier ID SBRACK RBRACK {

}

compund-stmt -> LCBRACK local-declarations statement-list RCBRACK {

}

local-declarations -> local-declarations var-declaration {

}
| empty {

}

statement-list -> statement-list statement {

}
| empty {

}

statement -> expression-stmt {

}
| compound-stmt {

}
| selection-stmt {

}
| iteration-stmt {

}
| return-stmt {

}

expression-stmt -> expression SEMI {

}
| SEMI {

}

selection-stmt -> IF LPAREN expression RPAREN statement {

}
| IF LPAREN expression RPAREN statement ELSE statement {

}

iteration-stmt -> WHILE LPAREN expression RPAREN statement {

}

return-stmt -> RETURN SEMI {

}
| RETURN expression SEMI {

}

expression -> var ASSIGN expression {

}
| simple-expression {

}

var -> ID {

}
| ID LBRACK expression RBRACK {
    
}

simple-expression -> additive-expression relop additive-expression {

}
| additive-expression {
    
}

additive-expression -> additive-expression addop term {

}
| term {
    
}

term -> term mulop factor {

}
| factor {
    
}

factor -> LPAREN expression RPAREN {
    
}
| var {
    
}
| call {
    
}
| NUM {
    
}

call -> ID LPAREN args RPAREN {
    
}

args -> arg-list {
    
}
| empty {
    
}

arg-list -> arg-list COMMA expression {
    
}
| expression {
    
}
